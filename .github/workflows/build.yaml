name: Build

on: [push]

jobs:
  download-models:
    runs-on: ubuntu-latest
    container: python:3.6.9

    steps:
    - uses: actions/checkout@v2

    - name: Cache Pip
      uses: actions/cache@v2
      with:
        path: data/models
        key: models-cache-${{ hashFiles('scripts/download_models.sh') }}
        restore-keys: |
          models-cache-${{ hashFiles('scripts/download_models.sh') }}
    
    - name: Install Python Tensorflow
      run: pip3 install tensorflow==1.12.0
      
    - name: Download Models
      run: scripts/download_models.sh
    
    - name: Temporarily save Models Artifact
      uses: actions/upload-artifact@v2
      with:
        name: models-artifact
        path: data/models
        retention-days: 1
  
  build:
    needs:
      - download-models
    runs-on: ubuntu-latest
    container: python:3.6.9
    services:
      minio:
        image: minio/minio:RELEASE.2021-11-24T23-19-33Z
        env:
          MINIO_ACCESS_KEY: dummy
          MINIO_SECRET_KEY: nosecret

    steps:
    - uses: actions/checkout@v2

    - name: Cache Pip
      uses: actions/cache@v2
      with:
        path: /github/home/.cache/pip
        key: pip-cache-${{ hashFiles('requirements.dev.txt') }}
        restore-keys: |
          pip-cache-${{ hashFiles('requirements.dev.txt') }}
          pip-cache-
    
    - name: Download Models Artifact
      uses: actions/download-artifact@master
      with:
        name: models-artifact
        path: data/models
    
    - name: Install dependencies
      run: apt update -y && apt install -y pkgconf libavformat-dev libavcodec-dev libavdevice-dev libavutil-dev libavfilter-dev
    
    - name: Install Python Packages
      run: pip3 install -r requirements.dev.txt
    
    - name: Check Python __init__ files
      run: |
        set -e
        for d in $(find smart_nvr tests ! -name '__pycache__' -type d); do ls ${d}/__init__.py; done
      
    - name: Run Tests
      run: pytest tests/
    
    - name: Black Check
      run: black smart_nvr/ tests/ --check
    
    - name: Mypy Check
      run: mypy smart_nvr/ tests/
    
    - name: ISort Check
      run: isort --check-only --diff smart_nvr/ tests/

  docker:
    needs:
      - download-models
      - build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: ['jetson']
    env:
      DOCKER_BUILDKIT: 1
      REPOSITORY_NAME: tkislan/smart-nvr
    steps:
    - uses: actions/checkout@v2

    - name: Set Image tags
      run: |
        echo "GIT_SHORT_SHA=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
        echo "GIT_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed 's#/#__#g')" >> $GITHUB_ENV
    
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
      with:
        image: tonistiigi/binfmt:latest
        platforms: arm64
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Download Models Artifact
      uses: actions/download-artifact@master
      with:
        name: models-artifact
        path: data/models
    
    - name: Pull image
      run: docker pull ghcr.io/${{ env.REPOSITORY_NAME }}:${{ matrix.target }}-${{ env.GIT_BRANCH }} || docker pull ghcr.io/${{ env.REPOSITORY_NAME }}:${{ matrix.target }}-master || true
    
    - name: Build image
      run: |
        if docker image inspect ghcr.io/${{ env.REPOSITORY_NAME }}:${{ matrix.target }}-${{ env.GIT_BRANCH }} > /dev/null; then
          docker build -f Dockerfile.${{ matrix.target }} --cache-from ghcr.io/${{ env.REPOSITORY_NAME }}:${{ matrix.target }}-${{ env.GIT_BRANCH }} -t ghcr.io/${{ env.REPOSITORY_NAME }}:${{ matrix.target }}-${{ github.run_number }}-${{ env.GIT_BRANCH }}-${{ env.GIT_SHORT_SHA }} .
        elif docker image inspect ghcr.io/${{ env.REPOSITORY_NAME }}:${{ matrix.target }}-master > /dev/null; then
          docker build -f Dockerfile.${{ matrix.target }} --cache-from ghcr.io/${{ env.REPOSITORY_NAME }}:${{ matrix.target }}-master -t ghcr.io/${{ env.REPOSITORY_NAME }}:${{ matrix.target }}-${{ github.run_number }}-${{ env.GIT_BRANCH }}-${{ env.GIT_SHORT_SHA }} .
        else
          docker build -f Dockerfile.${{ matrix.target }} -t ghcr.io/${{ env.REPOSITORY_NAME }}:${{ matrix.target }}-${{ github.run_number }}-${{ env.GIT_BRANCH }}-${{ env.GIT_SHORT_SHA }} .
        fi
        
        docker tag ghcr.io/${{ env.REPOSITORY_NAME }}:${{ matrix.target }}-${{ github.run_number }}-${{ env.GIT_BRANCH  }}-${{ env.GIT_SHORT_SHA }} ghcr.io/${{ env.REPOSITORY_NAME }}:${{ matrix.target }}-${{ env.GIT_BRANCH  }}

    - name: Push image
      run: |
        docker push ghcr.io/${{ env.REPOSITORY_NAME }}:${{ matrix.target }}-${{ github.run_number }}-${{ env.GIT_BRANCH  }}-${{ env.GIT_SHORT_SHA }}
        docker push ghcr.io/${{ env.REPOSITORY_NAME }}:${{ matrix.target }}-${{ env.GIT_BRANCH  }}
